
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R é um software livre e vem sem GARANTIA ALGUMA.
Você pode redistribuí-lo sob certas circunstâncias.
Digite 'license()' ou 'licence()' para detalhes de distribuição.

R é um projeto colaborativo com muitos contribuidores.
Digite 'contributors()' para obter mais informações e
'citation()' para saber como citar o R ou pacotes do R em publicações.

Digite 'demo()' para demonstrações, 'help()' para o sistema on-line de ajuda,
ou 'help.start()' para abrir o sistema de ajuda em HTML no seu navegador.
Digite 'q()' para sair do R.

> directory <- "/home/victor/desktop/mlearning/unicamp/assignment4/"
> 
> number_of_features <- 300
> 
> df <- read.csv(paste(directory, "dataset_ok.txt", sep=""), header=F)
> features <- sample(4:ncol(df), number_of_features)
> 
> x_indexes <- seq(from = 4, to = 100*3+1, by = 3)
> y_indexes <- seq(from = 5, to = 100*3+1, by = 3)
> z_indexes <- seq(from = 6, to = 100*3+1, by = 3)
> 
> df[, x_indexes] <- apply(df[, x_indexes], 1, fft)
> df[, y_indexes] <- apply(df[, y_indexes], 1, fft)
> df[, z_indexes] <- apply(df[, z_indexes], 1, fft)
> 
> df[, x_indexes] <- apply(df[, x_indexes], 1, Mod)
> df[, y_indexes] <- apply(df[, y_indexes], 1, Mod)
> df[, z_indexes] <- apply(df[, z_indexes], 1, Mod)
> 
> # Normalizing
> # Row-wise
> df$mean_row_X <- apply(df[, x_indexes], 1, mean)
> df$mean_row_Y <- apply(df[, y_indexes], 1, mean)
> df$mean_row_Z <- apply(df[, z_indexes], 1, mean)
> 
> df$sd_row_X <- apply(df[, x_indexes], 1, sd)
> df$sd_row_Y <- apply(df[, y_indexes], 1, sd)
> df$sd_row_Z <- apply(df[, z_indexes], 1, sd)
> 
> df[, x_indexes] <- df[, x_indexes] - df$mean_row_X
> df[, y_indexes] <- df[, y_indexes] - df$mean_row_Y
> df[, z_indexes] <- df[, z_indexes] - df$mean_row_Z
> 
> df[, x_indexes] <- df[, x_indexes] / df$sd_row_X
> df[, y_indexes] <- df[, y_indexes] / df$sd_row_Y
> df[, z_indexes] <- df[, z_indexes] / df$sd_row_Z
> 
> # General way normalization
> # df$mean <- apply(df[, 4:ncol(df)], 1, mean)
> # df$sd <- apply(df[, 4:ncol(df)], 1, sd)
> # df[, 4:ncol(df)] <- df[, 4:ncol(df)] - df$mean
> # df[, 4:ncol(df)] <- df[, 4:ncol(df)] / df$sd
> 
> #features <- colnames(df)
> #features <- features[4:length(features)]
> 
> #df <- data.frame(df[1:3], apply(df[features], 2, as.numeric))
> 
> # data <- read.csv(paste(directory, "dataset_ok.txt", sep=""), header=F)
> # 292218 e 146109 para range=10
> 
> training <- df[sample(1:nrow(df), floor(nrow(df)/2)),]
> testing <- df[sample(1:nrow(df), floor(nrow(df)/2)),]
> 
> classes <- levels(df$V2)
> rm(df)
> 
> models <- list()
> i <- 1
> form <- paste("Activity ~ ", paste(paste0("V", features), collapse= "+"))
> 
> # Training the models
> for (class in classes) {
+     cat("\n\n")
+     print(class)
+ 
+     training$Activity <- 0
+     training$Activity[training$V2 == class] <- 1
+ 
+     model <- glm(form, data=training, family=binomial())
+     training[paste("predict_", i)] <- predict(model, training, type="response")
+     
+     i <- i+1
+     # Cleaning the memory
+     model <- 0
+ }


[1] "Jogging"


[1] "LyingDown"


[1] "Sitting"


[1] "Stairs"


[1] "Standing"


[1] "Walking"
> 
> # Running the tests
> # talvez chamar which.max sem apply
> training$class <- apply(training[, c(grep("predict_", colnames(training)))], 1, which.max)
> training$classname <- classes[training$class]
> 
> for (class in classes) {
+   cat("\n\n\n")
+   print(class)
+   subset <- training[training$V2 == class, ]
+   print(paste("total rows: ", nrow(subset)))
+   
+   for (class2 in classes) {
+     cat("\n")
+     print(paste(class2, ":", nrow(subset[subset$classname == class2, ])))
+   }
+ }



[1] "Jogging"
[1] "total rows:  21568"

[1] "Jogging : 13588"

[1] "LyingDown : 2155"

[1] "Sitting : 4005"

[1] "Stairs : 1444"

[1] "Standing : 27"

[1] "Walking : 349"



[1] "LyingDown"
[1] "total rows:  13523"

[1] "Jogging : 7304"

[1] "LyingDown : 1656"

[1] "Sitting : 2791"

[1] "Stairs : 1461"

[1] "Standing : 63"

[1] "Walking : 248"



[1] "Sitting"
[1] "total rows:  16263"

[1] "Jogging : 8031"

[1] "LyingDown : 1190"

[1] "Sitting : 5423"

[1] "Stairs : 1333"

[1] "Standing : 48"

[1] "Walking : 238"



[1] "Stairs"
[1] "total rows:  13851"

[1] "Jogging : 7342"

[1] "LyingDown : 1595"

[1] "Sitting : 3026"

[1] "Stairs : 1586"

[1] "Standing : 30"

[1] "Walking : 272"



[1] "Standing"
[1] "total rows:  13913"

[1] "Jogging : 10007"

[1] "LyingDown : 862"

[1] "Sitting : 2086"

[1] "Stairs : 701"

[1] "Standing : 25"

[1] "Walking : 232"



[1] "Walking"
[1] "total rows:  15534"

[1] "Jogging : 10833"

[1] "LyingDown : 1295"

[1] "Sitting : 2069"

[1] "Stairs : 907"

[1] "Standing : 12"

[1] "Walking : 418"
> 
